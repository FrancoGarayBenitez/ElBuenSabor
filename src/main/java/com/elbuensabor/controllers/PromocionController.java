package com.elbuensabor.controllers;

import com.elbuensabor.dto.request.PromocionAplicacionDTO;
import com.elbuensabor.dto.request.PromocionRequestDTO;
import com.elbuensabor.dto.response.PromocionCalculoDTO;
import com.elbuensabor.dto.response.PromocionCompletaDTO;
import com.elbuensabor.dto.response.PromocionResponseDTO;
import com.elbuensabor.services.IPromocionService;
import jakarta.validation.Valid;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api/promociones")

public class PromocionController {

    private static final Logger logger = LoggerFactory.getLogger(PromocionController.class);

    @Autowired
    private IPromocionService promocionService;

    // ==================== ENDPOINTS PARA CLIENTES ====================

    /**
     * GET /api/promociones/vigentes
     * Obtener todas las promociones vigentes (para mostrar en home/cat√°logo)
     */
    @GetMapping("/vigentes")
    public ResponseEntity<List<PromocionResponseDTO>> getPromocionesVigentes() {
        logger.info("üìã Consultando promociones vigentes");
        try {
            List<PromocionResponseDTO> promociones = promocionService.findPromocionesVigentes();
            logger.info("‚úÖ Encontradas {} promociones vigentes", promociones.size());
            return ResponseEntity.ok(promociones);
        } catch (Exception e) {
            logger.error("‚ùå Error obteniendo promociones vigentes: {}", e.getMessage(), e);
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();
        }
    }

    /**
     * GET /api/promociones/articulo/{idArticulo}
     * Obtener promociones disponibles para un art√≠culo espec√≠fico
     */
    @GetMapping("/articulo/{idArticulo}")
    public ResponseEntity<List<PromocionResponseDTO>> getPromocionesParaArticulo(@PathVariable Long idArticulo) {
        logger.info("üéØ Consultando promociones para art√≠culo ID: {}", idArticulo);
        try {
            List<PromocionResponseDTO> promociones = promocionService.findPromocionesParaArticulo(idArticulo);
            logger.info("‚úÖ Encontradas {} promociones para art√≠culo {}", promociones.size(), idArticulo);
            return ResponseEntity.ok(promociones);
        } catch (Exception e) {
            logger.error("‚ùå Error obteniendo promociones para art√≠culo {}: {}", idArticulo, e.getMessage());
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();
        }
    }

    /**
     * GET /api/promociones/aplicables?idArticulo={id}&idSucursal={id}
     * Obtener promociones aplicables para un art√≠culo en una sucursal espec√≠fica
     */
    @GetMapping("/aplicables")
    public ResponseEntity<List<PromocionResponseDTO>> getPromocionesAplicables(
            @RequestParam Long idArticulo,
            @RequestParam(defaultValue = "1") Long idSucursal) {

        logger.info("üéØ Consultando promociones aplicables para art√≠culo {} en sucursal {}", idArticulo, idSucursal);
        try {
            List<PromocionResponseDTO> promociones = promocionService.findPromocionesAplicables(idArticulo, idSucursal);
            logger.info("‚úÖ Encontradas {} promociones aplicables", promociones.size());
            return ResponseEntity.ok(promociones);
        } catch (Exception e) {
            logger.error("‚ùå Error obteniendo promociones aplicables: {}", e.getMessage());
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();
        }
    }

    /**
     * POST /api/promociones/calcular-descuentos
     * Calcular descuentos para un conjunto de promociones (preview del carrito)
     */
    @PostMapping("/calcular-descuentos")
    public ResponseEntity<PromocionCalculoDTO> calcularDescuentos(
            @RequestParam(defaultValue = "1") Long idSucursal,
            @Valid @RequestBody List<PromocionAplicacionDTO> aplicaciones) {

        logger.info("üí∞ Calculando descuentos para {} aplicaciones en sucursal {}", aplicaciones.size(), idSucursal);
        try {
            PromocionCalculoDTO calculo = promocionService.calcularDescuentosParaPedido(idSucursal, aplicaciones);
            logger.info("‚úÖ Descuentos calculados: total ${}", calculo.getDescuentoTotal());
            return ResponseEntity.ok(calculo);
        } catch (Exception e) {
            logger.error("‚ùå Error calculando descuentos: {}", e.getMessage(), e);
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();
        }
    }

    // ==================== ENDPOINTS PARA ADMINISTRACI√ìN ====================

    /**
     * GET /api/promociones
     * Obtener todas las promociones (admin)
     */
    @GetMapping
    public ResponseEntity<List<PromocionResponseDTO>> getAllPromociones() {
        logger.info("üìã Admin: Consultando todas las promociones");
        try {
            List<PromocionResponseDTO> promociones = promocionService.findAll();
            return ResponseEntity.ok(promociones);
        } catch (Exception e) {
            logger.error("‚ùå Error obteniendo todas las promociones: {}", e.getMessage());
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();
        }
    }

    /**
     * GET /api/promociones/{id}
     * Obtener una promoci√≥n espec√≠fica por ID
     */
    @GetMapping("/{id}")
    public ResponseEntity<PromocionResponseDTO> getPromocionById(@PathVariable Long id) {
        logger.info("üîç Consultando promoci√≥n ID: {}", id);
        try {
            PromocionResponseDTO promocion = promocionService.findById(id);
            return ResponseEntity.ok(promocion);
        } catch (Exception e) {
            logger.error("‚ùå Error obteniendo promoci√≥n {}: {}", id, e.getMessage());
            return ResponseEntity.status(HttpStatus.NOT_FOUND).build();
        }
    }

    /**
     * POST /api/promociones
     * Crear nueva promoci√≥n (admin)
     */
    @PostMapping
    public ResponseEntity<PromocionResponseDTO> crearPromocion(@Valid @RequestBody PromocionRequestDTO request) {
        logger.info("‚ûï Admin: Creando nueva promoci√≥n: {}", request.getDenominacion());
        try {
            PromocionResponseDTO promocionCreada = promocionService.crearPromocion(request);
            logger.info("‚úÖ Promoci√≥n creada con ID: {}", promocionCreada.getIdPromocion());
            return ResponseEntity.status(HttpStatus.CREATED).body(promocionCreada);
        } catch (Exception e) {
            logger.error("‚ùå Error creando promoci√≥n: {}", e.getMessage(), e);
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).build();
        }
    }

    /**
     * PUT /api/promociones/{id}
     * Actualizar promoci√≥n existente (admin)
     */
    @PutMapping("/{id}")
    public ResponseEntity<PromocionResponseDTO> actualizarPromocion(
            @PathVariable Long id,
            @Valid @RequestBody PromocionRequestDTO request) {

        logger.info("‚úèÔ∏è Admin: Actualizando promoci√≥n ID: {}", id);
        try {
            PromocionResponseDTO promocionActualizada = promocionService.actualizarPromocion(id, request);
            logger.info("‚úÖ Promoci√≥n {} actualizada exitosamente", id);
            return ResponseEntity.ok(promocionActualizada);
        } catch (Exception e) {
            logger.error("‚ùå Error actualizando promoci√≥n {}: {}", id, e.getMessage());
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).build();
        }
    }

    /**
     * PATCH /api/promociones/{id}/activar
     * Activar promoci√≥n (admin)
     */
    @PatchMapping("/{id}/activar")
    public ResponseEntity<Void> activarPromocion(@PathVariable Long id) {
        logger.info("üü¢ Admin: Activando promoci√≥n ID: {}", id);
        try {
            promocionService.activarPromocion(id);
            logger.info("‚úÖ Promoci√≥n {} activada", id);
            return ResponseEntity.ok().build();
        } catch (Exception e) {
            logger.error("‚ùå Error activando promoci√≥n {}: {}", id, e.getMessage());
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).build();
        }
    }

    /**
     * PATCH /api/promociones/{id}/desactivar
     * Desactivar promoci√≥n (admin)
     */
    @PatchMapping("/{id}/desactivar")
    public ResponseEntity<Void> desactivarPromocion(@PathVariable Long id) {
        logger.info("üî¥ Admin: Desactivando promoci√≥n ID: {}", id);
        try {
            promocionService.desactivarPromocion(id);
            logger.info("‚úÖ Promoci√≥n {} desactivada", id);
            return ResponseEntity.ok().build();
        } catch (Exception e) {
            logger.error("‚ùå Error desactivando promoci√≥n {}: {}", id, e.getMessage());
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).build();
        }
    }

    /**
     * DELETE /api/promociones/{id}
     * Eliminar promoci√≥n (admin)
     */
    @DeleteMapping("/{id}")
    public ResponseEntity<Void> eliminarPromocion(@PathVariable Long id) {
        logger.info("üóëÔ∏è Admin: Eliminando promoci√≥n ID: {}", id);
        try {
            promocionService.delete(id);
            logger.info("‚úÖ Promoci√≥n {} eliminada", id);
            return ResponseEntity.ok().build();
        } catch (Exception e) {
            logger.error("‚ùå Error eliminando promoci√≥n {}: {}", id, e.getMessage());
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).build();
        }
    }

    @GetMapping("/vigentes-completas")
    public ResponseEntity<List<PromocionCompletaDTO>> obtenerPromocionesVigentesCompletas() {
        logger.info("üìã Consultando promociones vigentes completas con art√≠culos");

        List<PromocionCompletaDTO> promociones = promocionService.findPromocionesVigentesCompletas();

        logger.info("‚úÖ Encontradas {} promociones vigentes completas", promociones.size());

        return ResponseEntity.ok(promociones);
    }
}